/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/rook/rook/pkg/apis/ceph.rook.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NFSGaneshaLister helps list NFSGaneshas.
type NFSGaneshaLister interface {
	// List lists all NFSGaneshas in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.NFSGanesha, err error)
	// NFSGaneshas returns an object that can list and get NFSGaneshas.
	NFSGaneshas(namespace string) NFSGaneshaNamespaceLister
	NFSGaneshaListerExpansion
}

// nFSGaneshaLister implements the NFSGaneshaLister interface.
type nFSGaneshaLister struct {
	indexer cache.Indexer
}

// NewNFSGaneshaLister returns a new NFSGaneshaLister.
func NewNFSGaneshaLister(indexer cache.Indexer) NFSGaneshaLister {
	return &nFSGaneshaLister{indexer: indexer}
}

// List lists all NFSGaneshas in the indexer.
func (s *nFSGaneshaLister) List(selector labels.Selector) (ret []*v1beta1.NFSGanesha, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NFSGanesha))
	})
	return ret, err
}

// NFSGaneshas returns an object that can list and get NFSGaneshas.
func (s *nFSGaneshaLister) NFSGaneshas(namespace string) NFSGaneshaNamespaceLister {
	return nFSGaneshaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NFSGaneshaNamespaceLister helps list and get NFSGaneshas.
type NFSGaneshaNamespaceLister interface {
	// List lists all NFSGaneshas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.NFSGanesha, err error)
	// Get retrieves the NFSGanesha from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.NFSGanesha, error)
	NFSGaneshaNamespaceListerExpansion
}

// nFSGaneshaNamespaceLister implements the NFSGaneshaNamespaceLister
// interface.
type nFSGaneshaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NFSGaneshas in the indexer for a given namespace.
func (s nFSGaneshaNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.NFSGanesha, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NFSGanesha))
	})
	return ret, err
}

// Get retrieves the NFSGanesha from the indexer for a given namespace and name.
func (s nFSGaneshaNamespaceLister) Get(name string) (*v1beta1.NFSGanesha, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("nfsganesha"), name)
	}
	return obj.(*v1beta1.NFSGanesha), nil
}
